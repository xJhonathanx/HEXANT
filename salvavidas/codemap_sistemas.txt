# CodeMap  sistemas
Generado: 2025-09-20 11:10:56
Carpeta base: E:\GAME\HEXANTV1\src\hexant\juego\sistemas
Máx tamaño por archivo: 512 KB
Extensiones incluidas: .ts, .tsx, .js, .jsx, .mjs, .cjs, .css, .scss, .less, .html, .md, .json, .yml, .yaml, .svg, .txt, .ps1, .psm1, .sh

## Carpeta: .

--- index.ts  (1.4 KB)
  1 | import type { World } from "../../tipos";
  2 | import type { Cfg } from "../configuracion/predeterminados";
  3 | 
  4 | import { SistemaSemilla } from "./SistemaSemilla";
  5 | import { SistemaReina } from "./SistemaReina";
  6 | import { SistemaPlanificacion } from "./SistemaPlanificacion";
  7 | 
  8 | // Opcionales (si existen en tu árbol)
  9 | import { SistemaIA } from "./SistemaIA";
 10 | import { SistemaCria } from "./SistemaCria";
 11 | import { SistemaCriaLogistica } from "./SistemaCriaLogistica";
 12 | import { SistemaMetabolismo } from "./SistemaMetabolismo";
 13 | 
 14 | export function ejecutarSistemas(w:World, cfg:Cfg){
 15 |   (w as any)._tick = ((w as any)._tick ?? 0) + 1;
 16 | 
 17 |   // 0) Asegura el sembrado inicial: 1 builder + 3 workers
 18 |   SistemaSemilla(w, cfg);
 19 | 
 20 |   // 1) Metabolismo (si lo tienes con firma (w,cfg))
 21 |   if (typeof SistemaMetabolismo === "function") SistemaMetabolismo(w, cfg);
 22 | 
 23 |   // 2) Reina (postura solo con comida y tope 6)
 24 |   SistemaReina(w, cfg);
 25 | 
 26 |   // 3) Logística de cría (traslado de huevos)
 27 |   if (typeof SistemaCriaLogistica === "function") SistemaCriaLogistica(w);
 28 | 
 29 |   // 4) Incubación / eclosión
 30 |   if (typeof SistemaCria === "function") SistemaCria(w, cfg);
 31 | 
 32 |   // 5) IA / forrajeo / builder
 33 |   if (typeof SistemaIA === "function") SistemaIA(w, cfg);
 34 | 
 35 |   // 6) Planificación de nuevo hex SOLO con 6 huevos y builder vivo
 36 |   const m:any = w.meta;
 37 |   if (m && m.broodEggsStaged >= 6 && !m.broodTransferPending && w.ants.some(a => a.kind === "builder")){
 38 |     SistemaPlanificacion(w, cfg);
 39 |   }
 40 | }

--- README.md  (0.1 KB)
  1 | # Placeholder Lote A
  2 | Esta carpeta se llenará en los lotes siguientes. Mantener nombres sencillos.

--- SistemaAccionMover.ts  (0.5 KB)
  1 | /** SistemaAccionMover  integra posición y limita velocidad. */
  2 | import type { World } from "../../tipos";
  3 | 
  4 | export function SistemaAccionMover(w:World, _dt:number, maxSpeed:number){
  5 |   for (const a of w.ants){
  6 |     if (a.state === "dead") continue;
  7 | 
  8 |     // fricción suave
  9 |     a.vx *= 0.995;
 10 |     a.vy *= 0.995;
 11 | 
 12 |     // tope de velocidad
 13 |     const sp = Math.hypot(a.vx, a.vy);
 14 |     if (sp > maxSpeed){
 15 |       a.vx = (a.vx / sp) * maxSpeed;
 16 |       a.vy = (a.vy / sp) * maxSpeed;
 17 |     }
 18 | 
 19 |     // integrar
 20 |     a.x += a.vx;
 21 |     a.y += a.vy;
 22 |   }
 23 | }

--- SistemaCria.ts  (2.1 KB)
  1 | import type { World } from "../../tipos";
  2 | import type { Cfg } from "../configuracion/predeterminados";
  3 | import { EGGS_NEED_UND, HATCH_TIME } from "../configuracion/predeterminados";
  4 | 
  5 | /**
  6 |  * Mantiene el ciclo de los huevos:
  7 |  * - Si no se alimentan, expiran tras TTL.
  8 |  * - Si se alimentan >= EGGS_NEED_UND, cuenta regresiva de hatch y eclosión.
  9 |  *
 10 |  * Nota: usamos un TTL local de 5 min @ 60 FPS para evitar dependencias:
 11 |  */
 12 | const EGGS_TTL_TICKS = 5 * 60 * 60; // 5 min * 60 s/min * 60 ticks/s
 13 | 
 14 | export function SistemaCria(w: World, _cfg: Cfg) {
 15 |   for (const h of w.hexes) {
 16 |     if (!h.eggs || !h.eggs.active) continue;
 17 | 
 18 |     // TTL si no se alimenta
 19 |     h.eggs.ageTicks = (h.eggs.ageTicks ?? 0) + 1;
 20 |     if ((h.eggs.fed ?? 0) < EGGS_NEED_UND && (h.eggs.ageTicks ?? 0) >= EGGS_TTL_TICKS) {
 21 |       // Caducan por falta de alimento
 22 |       h.eggs.active = false;
 23 |       h.eggs.count = 0;
 24 |       continue;
 25 |     }
 26 | 
 27 |     // Eclosión si está alimentado
 28 |     if ((h.eggs.fed ?? 0) >= EGGS_NEED_UND) {
 29 |       // Asegura hatchTicks inicial
 30 |       h.eggs.hatchTicks = (h.eggs.hatchTicks ?? HATCH_TIME);
 31 | 
 32 |       // Decrementa de forma segura
 33 |       if ((h.eggs.hatchTicks ?? 0) > 0) {
 34 |         h.eggs.hatchTicks = (h.eggs.hatchTicks as number) - 1;
 35 |       }
 36 | 
 37 |       // ¿Listo para eclosionar?
 38 |       if ((h.eggs.hatchTicks ?? 0) <= 0) {
 39 |         const workers  = w.ants.filter(a => a.kind === "worker").length;
 40 |         const builders = w.ants.filter(a => a.kind === "builder").length;
 41 | 
 42 |         // Mantén tu regla de builder 1/10 workers
 43 |         const wantBuilder = builders < Math.floor(workers / 10);
 44 |         const makeBuilders = wantBuilder ? Math.min(1, h.eggs.count ?? 0) : 0;
 45 |         const makeWorkers  = Math.max(0, (h.eggs.count ?? 0) - makeBuilders);
 46 | 
 47 |         // Aquí normalmente generarías hormigas y limpiarías el lote.
 48 |         // Dejo el cierre no destructivo para no duplicar spawns si los manejas en otro sistema:
 49 |         h.eggs.active = false;
 50 |         // Si aquí quieres spawnear directamente, usa tu fábrica newAnt(...) y pushea:
 51 |         // for (let i=0;i<makeBuilders;i++) { ... }
 52 |         // for (let i=0;i<makeWorkers;i++)  { ... }
 53 |       }
 54 |     }
 55 |   }
 56 | }

--- SistemaCriaLogistica.ts  (1 KB)
  1 | import type { World } from "../../tipos";
  2 | import { HATCH_TIME } from "../configuracion/predeterminados";
  3 | 
  4 | /** Traslada 6 huevos de la reina al hex objetivo cuando está marcado en meta. */
  5 | export function SistemaCriaLogistica(w:World){
  6 |   if (!w.meta?.broodTransferPending) return;
  7 | 
  8 |   const queen = w.hexes.find(h=>h.host==="queen");
  9 |   if (!queen || !queen.eggs || (queen.eggs.count ?? 0) < 6) {
 10 |     // si por alguna razón no hay 6, reintenta luego
 11 |     return;
 12 |   }
 13 |   const target = w.hexes.find(h=>h.id===w.meta!.broodTargetHexId);
 14 |   if (!target) return;
 15 | 
 16 |   // mover 6 huevos al hex objetivo
 17 |   const move = 6;
 18 |   queen.eggs.count = Math.max(0, (queen.eggs.count ?? 0) - move);
 19 |   target.eggs = {
 20 |     active: true,
 21 |     fed: 0,
 22 |     count: move,
 23 |     hatchTicks: HATCH_TIME,
 24 |     tStart: (w._tick ?? 0),
 25 |     born: 0,
 26 |     ageTicks: 0,
 27 |     spots: []
 28 |   };
 29 | 
 30 |   w.meta!.broodEggsStaged = Math.max(0, (w.meta!.broodEggsStaged ?? 0) - move);
 31 |   w.meta!.broodTransferPending = false;
 32 | }

--- SistemaDecision.ts  (0.3 KB)
  1 | /** SistemaDecision  Lote D: asegura estados base. */
  2 | import { World } from "../../tipos";
  3 | export function SistemaDecision(w:World, _dt:number){
  4 |   for(const a of w.ants){
  5 |     if (a.state === "waiting") a.state = "foraging";
  6 |     if (a.state === "dead") continue;
  7 |   }
  8 | }

--- SistemaEconomia.ts  (0.6 KB)
  1 | import type { World } from "../../tipos";
  2 | 
  3 | /** Al tocar la reina, las hormigas depositan sus carryingUnits al banco (w.foodUnits). */
  4 | export function SistemaEconomia(w:World){
  5 |   const q = w.hexes.find(h=>h.host==="queen");
  6 |   if (!q) return;
  7 |   w.foodUnits = w.foodUnits ?? 0;
  8 | 
  9 |   for (const a of w.ants){
 10 |     if (!a.carryingUnits || a.carryingUnits <= 0) continue;
 11 |     const dx = a.x - q.cx, dy = a.y - q.cy;
 12 |     if (dx*dx + dy*dy <= (q.sidePx*q.sidePx)*0.3){
 13 |       w.foodUnits += a.carryingUnits;
 14 |       a.carryingUnits = 0;
 15 |       a.state = "foraging";
 16 |     }
 17 |   }
 18 | }

--- SistemaEntrada.ts  (0.7 KB)
  1 | /**
  2 |  * SistemaEntrada  helpers que invoca la UI (Aplicacion.tsx).
  3 |  * Click derecho: comida (10). Shift: patrón. Ctrl: peligro.
  4 |  */
  5 | import type { World } from "../../tipos";
  6 | import { stampFoodPattern } from "../contenido/Patrones";
  7 | 
  8 | export function placeFood(w:World, x:number, y:number, amount=10){
  9 |   const __tmp = {  x, y, amount, initial: amount  }; ( __tmp as any ).outside = true; w.food.push(__tmp);
 10 | }
 11 | export function placePattern(w:World, x:number, y:number){
 12 |   stampFoodPattern(w, x, y, { kind:"random", cellSize:24, amountPerCell:10 });
 13 | }
 14 | export function placeHazard(w:World, x:number, y:number){
 15 |   w.hazards.push({
 16 |     x, y, r: 12, hp: 100,
 17 |     vx: (Math.random()*0.6-0.3),
 18 |     vy: (Math.random()*0.6-0.3)
 19 |   });
 20 | }
 21 | 
 22 | 

--- SistemaFeromonas.ts  (0.9 KB)
  1 | import type { World } from '../../tipos';
  2 | import { MAX_BEACONS, BEACON_TTL_FOOD } from '../configuracion/predeterminados';
  3 | 
  4 | export function SistemaFeromonas(w:World){
  5 |   const t = (w as any)._tick ?? 0;
  6 | 
  7 |   // Decaimiento suave
  8 |   if ((t % 4) === 0){
  9 |     for (let i=w.beacons.length-1; i>=0; i--){
 10 |       const b = w.beacons[i];
 11 |       b.strength *= b.decay ?? 0.97;
 12 |       b.ttl = (b.ttl ?? BEACON_TTL_FOOD) - 4;
 13 |       if (b.strength < 0.05 || b.ttl <= 0) w.beacons.splice(i,1);
 14 |     }
 15 |   }
 16 | 
 17 |   // Limitar cantidad
 18 |   if (w.beacons.length > MAX_BEACONS){
 19 |     w.beacons.splice(0, w.beacons.length - MAX_BEACONS);
 20 |   }
 21 | 
 22 |   // Emisión pasiva desde nodos de comida
 23 |   if ((t % 30) === 0){
 24 |     for (const f of w.food){
 25 |       if (f.amount <= 0) continue;
 26 |       const s = Math.min(1, f.amount / 50);
 27 |       w.beacons.push({ x:f.x, y:f.y, strength: 0.5*s, decay: 0.97, ttl: BEACON_TTL_FOOD });
 28 |     }
 29 |   }
 30 | }

--- SistemaIA.ts  (0.5 KB)
  1 | import type { World } from "../../tipos";
  2 | import type { Cfg } from "../configuracion/predeterminados";
  3 | import { workerBrain, builderBrain } from "../inteligencia/cerebros/Cerebros";
  4 | 
  5 | export function SistemaIA(w: World, _cfg: Cfg) {
  6 |   const q = w.hexes.find(h => h.host === "queen");
  7 |   const cx = q?.cx ?? 0;
  8 |   const cy = q?.cy ?? 0;
  9 |   const anyFood = w.food.find(f => f.amount > 0);
 10 | 
 11 |   for (const a of w.ants) {
 12 |     if (a.kind === "worker")      workerBrain(w, a, cx, cy, anyFood);
 13 |     else if (a.kind === "builder")builderBrain(w, a, cx, cy);
 14 |   }
 15 | }

--- SistemaInfluencia.ts  (0.9 KB)
  1 | /** SistemaInfluencia  aplica correa suave alrededor de la reina. */
  2 | import { World } from "../../tipos";
  3 | import { INFLUENCE_BASE_PX, INFLUENCE_PER_HEX_PX } from "../configuracion/predeterminados";
  4 | 
  5 | function radioInfluencia(w:World){
  6 |   const nonQueen = w.hexes.filter(h => h.host !== "queen").length;
  7 |   return INFLUENCE_BASE_PX + nonQueen * INFLUENCE_PER_HEX_PX;
  8 | }
  9 | 
 10 | export function SistemaInfluencia(w:World, _dt:number){
 11 |   const q = w.hexes.find(h => h.host === "queen");
 12 |   if (!q) return;
 13 |   const R = radioInfluencia(w);
 14 | 
 15 |   for(const a of w.ants){
 16 |     if (a.state === "dead") continue;
 17 |     const dx = a.x - q.cx, dy = a.y - q.cy;
 18 |     const d  = Math.hypot(dx, dy) || 1;
 19 |     if (d > R){
 20 |       const over = (d - R) / R;                 // cuánto excede
 21 |       const pull = 0.08 + 0.22 * Math.min(1, over);
 22 |       a.vx -= (dx / d) * pull;
 23 |       a.vy -= (dy / d) * pull;
 24 |     }
 25 |   }
 26 | }

--- SistemaMetabolismo.ts  (0.9 KB)
  1 | import type { World } from "../../tipos";
  2 | import type { Cfg } from "../configuracion/predeterminados";
  3 | 
  4 | /** Metabolismo básico: las hormigas consumen y, si hay stock, se alimentan. */
  5 | export function SistemaMetabolismo(w: World, cfg: Cfg){
  6 |   // usa la config si existe; si no, un valor seguro por defecto
  7 |   const perTick = (cfg as any)?.metabolismUndPerTick ?? 0.02;
  8 | 
  9 |   for (const a of w.ants){
 10 |     a.hungerUnd = (a.hungerUnd ?? 0) + perTick;
 11 | 
 12 |     // si hay comida en almacén, se alimenta y reduce hambre
 13 |     const stock = (w as any).stockFood ?? 0;
 14 |     if (a.hungerUnd! > 0 && stock > 0){
 15 |       const feed = Math.min(a.hungerUnd!, stock);
 16 |       a.hungerUnd! -= feed;
 17 |       (w as any).stockFood = stock - feed;
 18 |     }
 19 | 
 20 |     // contaje de inanición (defensivo, por si algún ant no trae estas props)
 21 |     a.starveTicks = (a.hungerUnd! > 5) ? ((a.starveTicks ?? 0) + 1) : 0;
 22 |   }
 23 | }

--- SistemaPeligros.ts  (0.8 KB)
  1 | import type { World, Hex } from "../../tipos";
  2 | 
  3 | export function SistemaPeligros(w:World){
  4 |   const q = w.hexes.find((h:Hex)=>h.host==="queen");
  5 |   const cx = q?.cx ?? 0, cy = q?.cy ?? 0;
  6 |   const R  = (q?.sidePx ?? 40) * 9; // radio de patio simple
  7 | 
  8 |   for (const hz of w.hazards){
  9 |     const anyHz = hz as any;
 10 |     if (anyHz.vx == null){ anyHz.vx = (Math.random()*2-1)*0.6; anyHz.vy = (Math.random()*2-1)*0.6; }
 11 |     anyHz.vx += (Math.random()*2-1)*0.05;
 12 |     anyHz.vy += (Math.random()*2-1)*0.05;
 13 | 
 14 |     hz.x += anyHz.vx; hz.y += anyHz.vy;
 15 | 
 16 |     // Rebotar suave si sale del radio
 17 |     const dx = hz.x - cx, dy = hz.y - cy;
 18 |     const d = Math.hypot(dx,dy) || 1;
 19 |     if (d > R){
 20 |       hz.x = cx + dx*(R/d);
 21 |       hz.y = cy + dy*(R/d);
 22 |       anyHz.vx *= 0.5; anyHz.vy *= 0.5;
 23 |     }
 24 |   }
 25 | }

--- SistemaPercepcion.ts  (0.2 KB)
  1 | /** SistemaPercepcion  Lote D: placeholder (no-op). */
  2 | import { World } from "../../tipos";
  3 | export function SistemaPercepcion(_w:World, _dt:number){ /* no-op por ahora */ }

--- SistemaPlanificacion.ts  (1.3 KB)
  1 | import type { World } from "../../tipos";
  2 | import type { Cfg } from "../configuracion/predeterminados";
  3 | import { axialToPixelPT } from "../../utilidades/hex";
  4 | 
  5 | const DIRS: Array<[number,number]> = [[1,0],[1,-1],[0,-1],[-1,0],[-1,1],[0,1]];
  6 | 
  7 | export function SistemaPlanificacion(w:World, _cfg:Cfg){
  8 |   const qh = w.hexes.find(h=>h.host==="queen");
  9 |   if (!qh) return;
 10 | 
 11 |   const m = w.meta;
 12 |   if (!m || m.broodEggsStaged < 6) return;
 13 |   if (!w.ants.some(a=>a.kind==="builder")) return;
 14 |   if (m.broodTransferPending || m.broodTargetHexId) return;
 15 | 
 16 |   const S = qh.sidePx, aq = qh.aq ?? 0, ar = qh.ar ?? 0;
 17 |   for (let i=0;i<8;i++){
 18 |     const d = DIRS[(Math.random()*6)|0];
 19 |     const nq = aq+d[0], nr = ar+d[1];
 20 |     if (w.hexes.some(h=>h.aq===nq && h.ar===nr)) continue;
 21 | 
 22 |     const p = axialToPixelPT(nq, nr, S);
 23 |     const hx:any = {
 24 |       id: w.nextHexId++,
 25 |       cx: qh.cx + p.x, cy: qh.cy + p.y, sidePx:S,
 26 |       host:"worker", capacity:10, occupancy:0,
 27 |       completed:false, builtUnits:0, targetUnits:6,
 28 |       aq:nq, ar:nr,
 29 |       eggs:{ active:false, fed:0, tStart:0, born:0, count:0, hatchTicks:0, ageTicks:0, spots:[] }
 30 |     };
 31 |     w.hexes.push(hx);
 32 | 
 33 |     m.broodTargetHexId = hx.id;
 34 |     m.broodTransferPending = true; // el traslado lo hace SistemaCriaLogistica
 35 |     m.buildCooldownTicks = Math.max(m.buildCooldownTicks ?? 0, 90);
 36 |     return;
 37 |   }
 38 | }

--- SistemaReina.ts  (1.1 KB)
  1 | import type { World } from "../../tipos";
  2 | import type { Cfg } from "../configuracion/predeterminados";
  3 | 
  4 | /** Reina: postura con costo en w.foodUnits, tope 6 huevos en cola. */
  5 | export function SistemaReina(w:World, _cfg:Cfg){
  6 |   w.meta = w.meta ?? {
  7 |     broodEggsStaged: 0,
  8 |     broodTargetHexId: null,
  9 |     broodTransferPending: false,
 10 |     buildCooldownTicks: 0,
 11 |   };
 12 | 
 13 |   const m = w.meta!;
 14 |   if (m.buildCooldownTicks > 0) m.buildCooldownTicks--;
 15 | 
 16 |   const queen = w.hexes.find(h=>h.host==="queen");
 17 |   if (!queen) return;
 18 | 
 19 |   // Banco de comida
 20 |   w.foodUnits = w.foodUnits ?? 0;
 21 | 
 22 |   // Huevera en la reina
 23 |   queen.eggs = queen.eggs ?? {
 24 |     active: false, fed: 0, tStart: 0, born: 0,
 25 |     count: 0, hatchTicks: 0, ageTicks: 0, spots: []
 26 |   };
 27 | 
 28 |   // Tope 6 en cola
 29 |   if (m.broodEggsStaged >= 6) return;
 30 | 
 31 |   // Necesita comida disponible
 32 |   if (w.foodUnits <= 0) return;
 33 | 
 34 |   const tick = (w._tick ?? 0);
 35 |   // ritmo: 1 huevo / 30 ticks
 36 |   if ((tick % 30) !== 0) return;
 37 | 
 38 |   // coste por huevo: 1 und
 39 |   w.foodUnits = Math.max(0, (w.foodUnits ?? 0) - 1);
 40 | 
 41 |   queen.eggs.active = true;
 42 |   queen.eggs.count  = (queen.eggs.count ?? 0) + 1;
 43 |   m.broodEggsStaged++;
 44 | }

--- SistemaScout.ts  (2.8 KB)
  1 | import type { World } from "../../tipos";
  2 | import type { Cfg } from "../configuracion/predeterminados";
  3 | 
  4 | const RND = (n:number)=> (Math.random()*n)-(n/2);
  5 | 
  6 | export function SistemaScout(w:World, _cfg:Cfg){
  7 |   const W:any = w as any;
  8 |   const ants:any[] = w.ants as any[];
  9 | 
 10 |   // radio del domo cacheado
 11 |   if (W._domoR == null){
 12 |     const q = w.hexes.find((h:any)=>h.host==="queen");
 13 |     W._domoR = q ? q.sidePx*6.2 : Math.min((W.width||1200),(W.height||800))*0.35;
 14 |   }
 15 | 
 16 |   // seed: 1 scout + 1 kel (una sola vez)
 17 |   if (!W._scoutSeeded){
 18 |     const q = w.hexes.find((h:any)=>h.host==="queen");
 19 |     const cx = q?.cx ?? (W.width*0.5), cy = q?.cy ?? (W.height*0.5);
 20 |     ants.push({ id:w.nextAntId++, kind:"scout", x:cx+40, y:cy, vx:0, vy:0, state:"scouting" } as any);
 21 |     ants.push({ id:w.nextAntId++, kind:"kel",   x:cx+10, y:cy, vx:0, vy:0, state:"escort" } as any);
 22 |     W._scoutSeeded = true;
 23 |   }
 24 | 
 25 |   const scout = ants.find(a=>a.kind==="scout");
 26 |   const kel   = ants.find(a=>a.kind==="kel");
 27 |   if (!scout || !kel) return;
 28 | 
 29 |   // velocidad con bonificación si están cerca
 30 |   const dPair = Math.hypot(kel.x - scout.x, kel.y - scout.y);
 31 |   const speed = dPair < 24 ? 2.0 : 1.0;
 32 | 
 33 |   // deambular del scout (tendencia a salir del domo)
 34 |   const q = w.hexes.find((h:any)=>h.host==="queen");
 35 |   if (q){
 36 |     const dx = scout.x - q.cx, dy = scout.y - q.cy;
 37 |     const r = Math.hypot(dx,dy);
 38 |     if (r < W._domoR + 30){
 39 |       scout.vx += (dx/(r||1))*0.3 + RND(0.2);
 40 |       scout.vy += (dy/(r||1))*0.3 + RND(0.2);
 41 |     } else {
 42 |       scout.vx += RND(0.3);
 43 |       scout.vy += RND(0.3);
 44 |     }
 45 |   }
 46 |   scout.vx *= 0.96; scout.vy *= 0.96;
 47 |   scout.x  += scout.vx * speed; scout.y += scout.vy * speed;
 48 | 
 49 |   // kel orbita al scout; si está en modo mensajero, va a la reina
 50 |   const messenger = !!(W.meta?.scoutVigilia && (W.meta as any).kelIsMessenger);
 51 |   if (!messenger){
 52 |     const ang = (W._tick||0)*0.05;
 53 |     const R   = 18 * (W.meta?.scoutVigilia ? 3 : 1);
 54 |     const tx = scout.x + Math.cos(ang)*R;
 55 |     const ty = scout.y + Math.sin(ang)*R;
 56 |     kel.x += (tx - kel.x)*0.2;
 57 |     kel.y += (ty - kel.y)*0.2;
 58 |   } else if (q){
 59 |     kel.x += (q.cx - kel.x)*0.08;
 60 |     kel.y += (q.cy - kel.y)*0.08;
 61 |     if (Math.hypot(kel.x-q.cx, kel.y-q.cy) < 18){
 62 |       (W.meta as any).kelIsMessenger = false; // llegó
 63 |     }
 64 |   }
 65 | 
 66 |   // ¿hay comida fuera del domo?
 67 |   const hasOutsideFood = q
 68 |     ? w.food.some((f:any)=> f.amount>0 && Math.hypot(f.x-q.cx,f.y-q.cy) > W._domoR+10)
 69 |     : false;
 70 | 
 71 |   W.meta = W.meta ?? {};
 72 |   if (hasOutsideFood){
 73 |     (W.meta as any).scoutVigilia   = true;
 74 |     (W.meta as any).umbilicalActive= true;
 75 |     (W.meta as any).umbilicalX     = scout.x;
 76 |     (W.meta as any).umbilicalY     = scout.y;
 77 |     (W.meta as any).kelIsMessenger = true; // kel va a avisar
 78 |   } else {
 79 |     (W.meta as any).scoutVigilia   = false;
 80 |     (W.meta as any).umbilicalActive= false;
 81 |   }
 82 | }

--- SistemaSemilla.ts  (1.2 KB)
  1 | import type { World } from "../../tipos";
  2 | import type { Cfg } from "../configuracion/predeterminados";
  3 | 
  4 | /** Crea 1 builder y 3 workers solo una vez por mundo. */
  5 | export function SistemaSemilla(w:World, _cfg:Cfg){
  6 |   // Asegura meta con los campos que usa el resto del juego
  7 |   (w as any).meta = (w as any).meta ?? {
  8 |     broodTargetHexId: null,
  9 |     broodEggsStaged: 0,
 10 |     broodTransferPending: false,
 11 |     buildCooldownTicks: 0,
 12 |   };
 13 |   const meta:any = (w as any).meta;
 14 | 
 15 |   // Si ya sembramos, no repetir
 16 |   if (meta.__seeded) return;
 17 | 
 18 |   // Necesitamos el hex de la reina para posicionar el spawn
 19 |   const q = w.hexes.find(h => h.host === "queen");
 20 |   if (!q) return;
 21 | 
 22 |   const makeAnt = (kind:"worker"|"builder") => {
 23 |     w.ants.push({
 24 |       id: w.nextAntId++,
 25 |       kind,
 26 |       x: q.cx, y: q.cy,
 27 |       vx: 0, vy: 0,
 28 |       state: "idle",
 29 |       carryingUnits: 0,
 30 |       homeHexId: q.id,
 31 |       hungerUnd: 0,
 32 |     } as any);
 33 |   };
 34 | 
 35 |   // Al menos 1 constructora
 36 |   if (!w.ants.some(a => a.kind === "builder")) makeAnt("builder");
 37 | 
 38 |   // Completa hasta 3 obreras
 39 |   const existingWorkers = w.ants.filter(a => a.kind === "worker").length;
 40 |   for (let i = existingWorkers; i < 3; i++) makeAnt("worker");
 41 | 
 42 |   meta.__seeded = true;
 43 | }


